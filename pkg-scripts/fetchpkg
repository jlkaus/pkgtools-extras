#!/bin/bash


# config file sourced from ${PKGTOOLS_EXTRAS_CONF:-/etc/pkgtools-extras.conf}.
PKGTOOLS_EXTRAS_CONF=${PKGTOOLS_EXTRAS_CONF:-/etc/pkgtools-extras.conf}
if [ ! -e ${PKGTOOLS_EXTRAS_CONF} ]; then
    echo "*** ERROR: ${PKGTOOLS_EXTRAS_CONF} does not exist.  Aborting." >&2
    exit 64
fi

declare -A MIRRORS
. ${PKGTOOLS_EXTRAS_CONF}

# Allow WGETFLAGS to be empty, or the MIRRORS to be empty.
# If CACHEDIR or WORKDIR are not set, terminate.
if [ -z "$CACHEDIR" -o -z "$WORKDIR" ]; then
    echo "*** ERROR: CACHEDIR and WORKDIR both need to be set in the $PKGTOOLS_EXTRAS_CONF file.  Aborting." >&2
    exit 64
fi

if [ ! -e "${WORKDIR}/pkglist" -o ! -e "${WORKDIR}/PACKAGES.TXT" -o ! -e "${WORKDIR}/CHECKSUMS.md5" ]; then
    echo "*** ERROR: No pkglist (or PACKAGES.TXT, or CHECKSUMS.md5) found in ${WORKDIR}.  Please update the pkglist." >&2
    exit 1
fi


# Options:
#   --force: Download it again, replacing what might already be in the cache.
#   --no-verify: Don't verify the downloaded file
#   --skip-missing: If a package isn't available at the mirror, skip it.
# Arguments:
#   PKGNAMES: a list of packagenames to download.  Must include full name, with version, arch, build number, etc.

DO_VERIFY=1
FORCE_DOWNLOAD=
SKIP_MISSING=
PKGNAMES=

while [ -n "$1" ]; do
    case $1 in
	--no-verify)
	    DO_VERIFY=
	    shift
	    ;;
	--force)
	    FORCE_DOWNLOAD=1
	    shift
	    ;;
	--skip-missing)
	    SKIP_MISSING=1
	    shift
	    ;;
	*)
	    PKGNAMES="$PKGNAMES $1"
	    shift
	    ;;
    esac
done

#echo "DO_VERIFY=$DO_VERIFY"
#echo "FORCE_DOWNLOAD=$FORCE_DOWNLOAD"
#echo "PKGNAMES=$PKGNAMES"

if [ ! -e "$CACHEDIR" -o ! -d "$CACHEDIR" ]; then
    echo "*** ERROR: $CACHEDIR doesn't exist or isn't a directory." >&2
    exit 1
fi

TMPDIR=$( mktemp -d --tmpdir fetchpkg.XXXXXX )
if [ $? -ne 0 ]; then
    echo "*** ERROR: Unable to create a temporary directory.???" >&2
    exit 1
fi

for x in $PKGNAMES; do
    # load in the pkginfo file, find the package filename, location, and extension
    PKG_DATA=( $(cat ${WORKDIR}/pkglist | awk "\$6==\"${x}\" { print \$1,\$7,\$6,\$8 }" ) )
	       
    if [ -z "${PKG_DATA[0]}" ]; then
	if [ -z "${SKIP_MISSING}" ]; then
	    echo "*** ERROR: Package $x not found in the pkglist." >&2
	    exit 1
	else
	    echo "*** WARN: Package $x not found in the pkglist.  Skipping." >&2
	fi
    else
#	echo "${PKG_DATA[@]}"

	REPO=${PKG_DATA[0]}
	MIRROR=${MIRRORS[$REPO]}
	LOCAL_PATH=${PKG_DATA[1]}
	REMOTE_PATH=$(echo "$LOCAL_PATH" |sed -e "s/^\\.\\/$REPO\\///")
	PKGNAME="${PKG_DATA[2]}.${PKG_DATA[3]}"

	mkdir -p ${CACHEDIR}/${LOCAL_PATH}
	mkdir -p ${TMPDIR}/${LOCAL_PATH}
	if [ ! -e "${CACHEDIR}/${LOCAL_PATH}/${PKGNAME}" -o -n "$FORCE_DOWNLOAD" ]; then
	    wget $WGETFLAGS -O ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} ${MIRROR}${REMOTE_PATH}/${PKGNAME}
	    if [ $? -eq 0 ]; then
		if [ -n "$DO_VERIFY" ]; then
		    wget $WGETFLAGS -O ${TMPDIR}/${LOCAL_PATH}/${PKGNAME}.asc ${MIRROR}${REMOTE_PATH}/${PKGNAME}.asc
		    if [ $? -eq 0 ]; then
			# md5sum .... (get the checksum from the CHECKSUMS.md5 file for this package)
			(
			    cd ${TMPDIR}
			    tail +13 ${WORKDIR}/CHECKSUMS.md5 | grep -e " ${LOCAL_PATH}/${PKGNAME}" |md5sum -c -
			)			    
			if [ $? -eq 0 ]; then
			    gpg --verify ${TMPDIR}/${LOCAL_PATH}/${PKGNAME}.asc ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} 2> /dev/null
			    if [ $? -eq 0 ]; then
				mv -f ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} ${CACHEDIR}/${LOCAL_PATH}/${PKGNAME}
			    else
				echo "*** ERROR: gpg signature for package $x incorrect." >&2
				exit 1
			    fi
			else
			    echo "*** ERROR: md5sum for package $x incorrect." >&2
			    exit 1
			fi
		    else
			echo "*** ERROR: Unable to download asc file for package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}.asc]." >&2
			exit 1
		    fi
		else
		    mv -f ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} ${CACHEDIR}/${LOCAL_PATH}/${PKGNAME}
		fi
	    else
		if [ -z "${SKIP_MISSING}" ]; then
		    echo "*** ERROR: Unable to download package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}]." >&2
		    exit 1
		else
		    echo "*** WARN: Unable to download package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}].  Skipping." >&2
		fi
	    fi	
	else
	    echo "*** WARN: Package $x already downloaded to cache.  Skipping." >&2
	fi
	
    fi
done

rm -rf ${TMPDIR}
