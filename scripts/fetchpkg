#!/bin/bash

TMPDIR=
function cleanup() {
    if [ -n "$TMPDIR" ]; then
	rm -rf $TMPDIR
    fi
}

function warn_msg() {
    echo "*** WARN: " "$@" >&2
}

function error_msg() {
    echo "*** ERROR: " "$@" >&2
}

function abort_clean() {
    exit_status=$1
    shift
    error_msg "$@"
    cleanup
    exit ${exit_status}
}

# config file sourced from ${PKGTOOLS_EXTRAS_CONF:-/etc/pkgtools-extras.conf}.
PKGTOOLS_EXTRAS_CONF=${PKGTOOLS_EXTRAS_CONF:-/etc/pkgtools-extras.conf}
if [ ! -e ${PKGTOOLS_EXTRAS_CONF} ]; then
    abort_clean 78 "${PKGTOOLS_EXTRAS_CONF} does not exist.  Aborting."
fi

declare -A MIRRORS
. ${PKGTOOLS_EXTRAS_CONF}

# Allow WGETFLAGS to be empty, or the MIRRORS to be empty.
# If WORKDIR is not set, terminate.
if [ -z "$WORKDIR" ]; then
    abort_clean 78 "WORKDIR needs to be set in the $PKGTOOLS_EXTRAS_CONF file.  Aborting."
fi

if [ ! -e "${WORKDIR}/pkglist" -o ! -e "${WORKDIR}/PACKAGES.TXT" -o ! -e "${WORKDIR}/CHECKSUMS.md5" ]; then
    abort_clean 72 "No pkglist (or PACKAGES.TXT, or CHECKSUMS.md5) found in ${WORKDIR}.  Please update the pkglist."
fi

TMPDIR=$( mktemp -d --tmpdir fetchpkg.XXXXXX )
if [ $? -ne 0 ]; then
    abort_clean 73 "Unable to create a temporary directory ($?)."
fi

trap 'cleanup' 2 14 15 EXIT

# Options:
#   --force: Download it again, replacing what might already be in place.
#   --cache: Download to the CACHEDIR from the config file, at the appropriate relative directory
#   --dir DIRECTORY: Download packages to DIRECTORY, with no hierarchy
#   --no-verify: Don't verify the downloaded file
#   --skip-missing: If a package isn't available at the mirror, skip it.
# Arguments:
#   PKGNAMES: a list of packagenames to download.  Must include full name, with version, arch, build number, etc.
# By default, downloads the packages to the current directory, with no hierarchy.

DO_VERIFY=1
FORCE_DOWNLOAD=
SKIP_MISSING=
PKGNAMES=
TARGET_DIR=$(pwd)
USE_CACHE=
EXEC_STRING=

while [ -n "$1" ]; do
    case $1 in
	--no-verify|-n)
	    DO_VERIFY=
	    shift
	    ;;
	--force|-f)
	    FORCE_DOWNLOAD=1
	    shift
	    ;;
	--cache|-c)
	    USE_CACHE=1
	    shift

	    if [ -z "$CACHEDIR" ]; then
		abort_clean 78 "CACHEDIR needs to be set in the $PKGTOOLS_EXTRAS_CONF file when using --cache.  Aborting."
	    fi
	    ;;
	--dir|-d)
	    shift
	    TARGET_DIR=$1
	    shift
	    ;;
	--exec|-e)
	    shift
	    EXEC_STRING=$1
	    shift
	    ;;
	--skip-missing|-s)
	    SKIP_MISSING=1
	    shift
	    ;;
	*)
	    PKGNAMES="$PKGNAMES $1"
	    shift
	    ;;
    esac
done

if [ -n "$EXEC_STRING" ]; then
    TARGET_DIR=
    USE_CACHE=
fi

#echo "DO_VERIFY=$DO_VERIFY"
#echo "FORCE_DOWNLOAD=$FORCE_DOWNLOAD"
#echo "PKGNAMES=$PKGNAMES"

for x in $PKGNAMES; do
    # load in the pkginfo file, find the package filename, location, and extension
    PKG_DATA=( $(cat ${WORKDIR}/pkglist | awk "\$6==\"${x}\" { print \$1,\$7,\$6,\$8; exit }" ) )
	       
    if [ -z "${PKG_DATA[0]}" ]; then
	if [ -z "${SKIP_MISSING}" ]; then
	    abort_clean 1 "Package $x not found in the pkglist."
	else
	    warn_msg "Package $x not found in the pkglist.  Skipping."
	fi
    else
#	echo "${PKG_DATA[@]}"

	REPO=${PKG_DATA[0]}
	MIRROR=${MIRRORS[$REPO]}
	LOCAL_PATH=${PKG_DATA[1]}
	REMOTE_PATH=$(echo "$LOCAL_PATH" |sed -e "s/^\\.\\/$REPO\\///")
	PKGNAME="${PKG_DATA[2]}.${PKG_DATA[3]}"

	if [ -n "$USE_CACHE" ]; then
	    TARGET_DIR=${CACHEDIR}/${LOCAL_PATH}
	fi

	if [ -n "${TARGET_DIR}" ]; then
	    mkdir -p ${TARGET_DIR}
	fi
	mkdir -p ${TMPDIR}/${LOCAL_PATH}
	if [ -z "${TARGET_DIR}" -o ! -e "${TARGET_DIR}/${PKGNAME}" -o -n "$FORCE_DOWNLOAD" ]; then
	    wget $WGETFLAGS -O ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} ${MIRROR}${REMOTE_PATH}/${PKGNAME}
	    if [ $? -eq 0 ]; then
		if [ -n "$DO_VERIFY" ]; then
		    wget $WGETFLAGS -O ${TMPDIR}/${LOCAL_PATH}/${PKGNAME}.asc ${MIRROR}${REMOTE_PATH}/${PKGNAME}.asc || abort_clean 1 "Unable to download asc file for package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}.asc] ($?)."
		    # md5sum .... (get the checksum from the CHECKSUMS.md5 file for this package)
		    (
			cd ${TMPDIR}
			tail +13 ${WORKDIR}/CHECKSUMS.md5 | grep -e " ${LOCAL_PATH}/${PKGNAME}$" -e " ${LOCAL_PATH}/${PKGNAME}.asc$" |md5sum -c -
		    ) || abort_clean 1 "md5sum for package $x incorrect."   
		    gpg --verify ${TMPDIR}/${LOCAL_PATH}/${PKGNAME}.asc ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} 2> /dev/null || abort_clean 1 "gpg signature for package $x incorrect."
		fi

		if [ -z "$EXEC_STRING" ]; then
		    mv -f ${TMPDIR}/${LOCAL_PATH}/${PKGNAME} ${TARGET_DIR}/${PKGNAME}
		else
		    EXEC_STRING="${EXEC_STRING} ${TMPDIR}/${LOCAL_PATH}/${PKGNAME}"
		fi
	    else
		if [ -z "${SKIP_MISSING}" ]; then
		    abort_clean 1 "Unable to download package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}] ($?)."
		else
		    warn_msg "Unable to download package $x from [${MIRROR}${REMOTE_PATH}/${PKGNAME}] ($?).  Skipping."
		fi
	    fi	
	else
	    warn_msg "Package $x already downloaded.  Skipping."
	fi
    fi
done

if [ -n "$EXEC_STRING" ]; then
    ${EXEC_STRING}
    exit $?
fi

cleanup
exit 0
