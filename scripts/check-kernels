#!/bin/bash

PKG_LIST_LOC=/var/lib/pkgtools/packages
BOOT_LOC=/boot
EFI_LOC=$BOOT_LOC/efi/EFI/Slackware
LILO_CONF=/etc/lilo.conf
ELILO_CONF=$EFI_LOC/elilo.conf

# Default full output lines should include:
#   Installed (version list, where any installed package for the version counts)
#   Headers (version of installed headers package)
#   Running (version)
#   Configured (version list, configured in lilo or elilo config)
#   Used  (Running + Configured + Headers)
#   Unused (Installed - Used)
# Options for --used, --unused yield just a space seperated list of those versions. (useful for remove-unused-kernels)
# Option for --boot-config yields one line per configured kernel, with info about where it is configured: (useful for set-boot-kernel)
#   tag version kernel-file package-name initrd-file initrd-status tool default "Label"


function find_versions {
    find $PKG_LIST_LOC -name "$1-*" -type f -printf '%f\n' |sed -e "s/^$1-//; s/-.*\$//"
}

function parse_lilo_config {
    if [ -e "$1" ]; then
    sed -E -n \
	-e 's/^[[:space:]]*#.*$//' \
	-e 's/^[[:space:]]*$//' \
        -e 's/^[[:space:]]*//' \
        -e 's/[[:space:]]*$//' \
        -e '/^image|label|initrd|default|other[[:space:]]=/ p' ${1} \
	|awk -e "BEGINFILE {\
                     is_default=\"__non_default__\"; \
	       	 } \
		 { \
		     split(\$0,wrk,/[[:space:]]*=[[:space:]]*/); \
		     if(wrk[1]==\"default\") { \
		     	 deflt=wrk[2]; \
		     } \
	       	     if((wrk[1]==\"image\" || wrk[1]==\"other\") && image_name != \"\") { \
		         print is_default, image_name, initrd, label;\
                         image_name=\"\";\
                         initrd=\"__none__\";\
                         label=\"\";\
		         is_default=\"__non_default__\";\
                     }\
                     if(wrk[1]==\"image\") {\
                         image_name=wrk[2];\
                     }\
                     if(wrk[1]==\"label\") {\
                         label=wrk[2];\
		         if(label==deflt || deflt==\"\") {\
		             is_default=\"__default__\"; \
			     deflt=label; \
	                 }\
                     }\
                     if(wrk[1]==\"initrd\") {\
                         initrd=wrk[2];\
                     }\
                  }\
                  ENDFILE {\
                      if(image_name!=\"\") {\
                          print is_default, image_name, initrd, label;\
                      }\
                  }"|sed -e "s/^/$2 /;"
    fi
}

CONFIGS=$( parse_lilo_config $LILO_CONF __lilo__; parse_lilo_config $ELILO_CONF __elilo__ )

PROPER_CONFIGS=$(while read -r tool dflt image initrd label ; do

    if [ "${image:0:1}" != "/" ]; then
	if [ "$tool" = "__lilo__" ]; then
	    image="${BOOT_LOC}/${image}"
	else
	    image="${EFI_LOC}/${image}"
	fi
    fi

    if [ "${initrd}" != "__none__" -a "${initrd:0:1}" != "/" ]; then
	if [ "$tool" = "__lilo__" ]; then
	    initrd="${BOOT_LOC}/${initrd}"
	else
	    initrd="${EFI_LOC}/${initrd}"
	fi
    fi

    image_tag=${image##*/vmlinuz}
    initrd_tag=${initrd##*/initrd}
    initrd_tag=${initrd_tag%%.gz}

#    echo $initrd $image_tag $initrd_tag
    
    if [ -z "$image_tag" ]; then
	real_tag="__invalid_tag__"
    elif [ "$initrd" != "__none__" -a -z "$initrd_tag" ]; then
	real_tag="__invalid_tag__"
    elif [ "$initrd" != "__none__" -a "$initrd_tag" != "$image_tag" ]; then
	real_tag="__invalid_tag__"
    elif [ "$image_tag" = "-huge" -o "$image_tag" = "-generic" ]; then
    	real_tag="__invalid_tag__"
    else
	real_tag="${image_tag##-}"
    fi

#    echo $real_tag
    
    if [ -r "$image" ]; then
	image_md5=$(md5sum $image 2>/dev/null |awk '{print $1}')
    else
	image_md5="__missing__"
    fi
    if [ "$initrd" != "__none__" ]; then
	if [ -r "$initrd" ]; then
	    initrd_md5=$(md5sum $initrd 2>/dev/null |awk '{print $1}')
	else
	    initrd_md5=__missing__
	fi
    else
	initrd_md5=__none__
    fi

    vers=$(echo "$image_tag" | sed -E -n -e '/[[:digit:].]+/ { s/^[^[:digit:].]*-//; s/-[^[:digit:].]*$//; s/-.*$//; p; q }')

    found_size=
    found_ver=
    found_pkg=__notfound__
    if [ -z "$initrd_md5" ]; then
	found_initrd="__initrd_none__"
    else
	found_initrd="__notfound__"
    fi
    
    for y in $BOOT_LOC/vmlinuz-*-*; do
	y_md5=$(md5sum $y 2>/dev/null |awk '{print $1}')
	y_file=${y##*/}
	y_corename=${y_file##vmlinuz-}
	y_size=${y_corename%%-*}
	y_ver=${y_corename##*-}
	y_initrd="initrd-${y_ver}.gz"
	if [ -r "$BOOT_LOC/${y_initrd}" ]; then
	    y_initrd_md5=$(md5sum $BOOT_LOC/${y_initrd} 2>/dev/null |awk '{print $1}')
	else
	    y_initrd_md5=
	fi
	
#	echo "  CHECK: $y_corename $y_size $y_ver $y_file $y_md5 $y_initrd $y_initrd_md5"

	if [ "$initrd_md5" = "__none__" ]; then
	    found_initrd="__initrd_none__"
	elif [ "$initrd_md5" = "__missing__" ]; then
	    found_initrd="__initrd_missing__"
	elif [ "$initrd_md5" == "$y_initrd_md5" ]; then
	    found_initrd="__initrd_ok__"
	else
	    found_initrd="__initrd_changed__"
	fi

	if [ "$image_md5" == "$y_md5" ]; then
	    found_pkg=$(grep -l -s "^${BOOT_LOC##/}/vmlinuz-${y_corename}" ${PKG_LIST_LOC}/kernel-*)
	    found_pkg=${found_pkg##*/}
	    found_size=${y_size}
	    found_ver=${y_ver}
	    break
	fi
    done

#    echo $vers $found_ver
    
    if [ -n "$vers" ]; then
	real_tag="__invalid_tag__"
    fi
    if [ -n "$found_ver" ] ; then
	vers=$found_ver
    fi
    if [ -z "$vers" ]; then
	vers=__unknown_version__
    fi
    
#    echo "$tool $real_tag $dflt $image $initrd $found_initrd $vers $found_pkg $label"
    echo "$real_tag $vers $image $found_pkg $initrd $found_initrd $tool $dflt $label"
    
done <<< "$CONFIGS")

CONFIGURED_VERS=$(while read -r tag vers otherstuff ; do
		      if [ "$vers" != "__unknown_version__" ]; then
			  echo "$vers"
		      fi
done<<<"$PROPER_CONFIGS" | sort |uniq)

RUNNING_VER=$(uname -r)
HEADER_VER=$(find_versions kernel-headers)
INSTALLED_VERS=$( ( find_versions kernel-generic; find_versions kernel-huge; find_versions kernel-modules; find_versions kernel-source ) |sort |uniq )
CONFIGURED_VERS=$( echo "$CONFIGURED_VERS" |sort |uniq )
USED_VERS=$( ( echo "$RUNNING_VER"; echo "$HEADER_VER"; echo "$CONFIGURED_VERS" ) | sort |uniq )
UNUSED_VERS=$( comm -23 <(echo "$INSTALLED_VERS") <(echo "$USED_VERS") )


if [ -z "$1" ]; then
    echo "Running:    " $RUNNING_VER
    echo "Headers:    " $HEADER_VER
    echo "Configured: " $CONFIGURED_VERS
    echo "Installed:  " $INSTALLED_VERS
    echo "Used:       " $USED_VERS
    echo "Unused:     " $UNUSED_VERS
elif [ $# -gt 1 ]; then
    echo "*** ERROR: Only one option allowed." >&2
    exit 64
else
    case $1 in
	--used)
	    echo "$USED_VERS"
	    ;;
	--unused)
	    echo "$UNUSED_VERS"
	    ;;
	--running)
	    echo "$RUNNING_VER"
	    ;;
	--header)
	    echo "$HEADER_VER"
	    ;;
	--installed)
	    echo "$INSTALLED_VERS"
	    ;;
	--configured)
	    echo "$CONFIGURED_VERS"
	    ;;
	--boot-configs)
	    echo "$PROPER_CONFIGS"
	    ;;
	*)
	    echo "*** ERROR: Don't understand option [$1]." >&2
	    exit 64
	    ;;
    esac
fi

exit
